<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ArchtITioner]]></title>
  <link href="http://archtitioner.com/atom.xml" rel="self"/>
  <link href="http://archtitioner.com/"/>
  <updated>2014-05-17T16:56:41-05:00</updated>
  <id>http://archtitioner.com/</id>
  <author>
    <name><![CDATA[Jim Presley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[History Lessons]]></title>
    <link href="http://archtitioner.com/blog/2014/05/16/history-lessons/"/>
    <updated>2014-05-16T17:18:46-05:00</updated>
    <id>http://archtitioner.com/blog/2014/05/16/history-lessons</id>
    <content type="html"><![CDATA[<p>For many years I&rsquo;ve enjoyed history and reflecting on what things must have been
like for people in other places and times. Some of our favorite family trips
have been immersive historical experiences in places like Williamsburg, Virginia
or New Salem, Illinois where characters in costume recreate times long since
past. <img class="right" src="http://archtitioner.com/images/williamsburg2.png" title="Williamsburg" > Perhaps a result of
that predisposition, along with my 30th anniversary as an IT professional, I
have taken time to pause to think about the history of IT and where it is
headed.</p>

<p>Despite the relative short history of IT, it is not difficult to spot cycles and
trends.  For example, in the late 80&rsquo;s and early 90&rsquo;s, I had an opportunity to
work with  a small Silicon Valley start-up company, <strong>Go Corporation</strong>, as they
tried to bring <strong>mobile tablet computers to market</strong> that featured a
gesture-based user experience and handwriting recognition. The vision was clear
but unfortunately the technology was not quite up to the task. <strong>It took another
20 years before screen, battery, processor, and wireless technology would enable
the shift from desktop to mobile first computing to begin.</strong></p>

<p>Similarly, in the late 90&rsquo;s, rich graphical user interfaces powered by desktop
computers promised a greatly improved user experience. I helped to build a state
of the art technical <strong>framework in Smalltalk that enabled complex MVC
applications to be built.</strong> It featured sophisticated event handling allowing
data binding between the model and view layer. It was network aware and allowed
applications to be deployed to the server with changes automatically pulled down
to the client. <strong>Sound a little like a rich SPA browser app?</strong> Again, the
limitations of client hardware and the  proprietary nature of fat-client
languages and tools ultimately led to the web becoming the preferred mechanism
for building business applications. <strong>Now 15 years later, JavaScript frameworks
are maturing that leverage many of the same concepts albeit much more robust
implementations.</strong></p>

<p><img class="center" src="http://archtitioner.com/images/cycle.png" width="100" height="60">
These two examples show how <strong>technology will cycle as it moves forward.</strong>
Visionary concepts gain intellectual traction but do not always pass the
technological readiness test and are discarded. It doesn&rsquo;t mean the idea was bad
just not compatible contextually with that time and place. It is important to
learn from history so we are not doomed to repeat it. <strong>Unfortunately, sometimes
people take this to mean that a failed attempt should become a new &ldquo;law&rdquo; of IT
practice.</strong></p>

<p>As an <em>archtITioner</em>, be careful what you learn from past failure. Think about
the circumstances that the developers from an earlier time were under. Consider
the entire context and question every assumption you make. Remember the
challenges but determine if they still hold true or have been resolved.
<strong>Afterall, old discarded ideas may be good fodder for tomorrow&rsquo;s innovation.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile: Intelligent IT]]></title>
    <link href="http://archtitioner.com/blog/2014/05/03/intelligent-it/"/>
    <updated>2014-05-03T10:13:53-05:00</updated>
    <id>http://archtitioner.com/blog/2014/05/03/intelligent-it</id>
    <content type="html"><![CDATA[<p>I came across an interesting
<a href="http://www.ted.com/talks/alex_wissner_gross_a_new_equation_for_intelligence">TEDTalk</a>
by <a href="http://www.alexwg.org/">Alex Wissner-Gross</a> proposing an equation for
intelligence. The essence of the equation, F = T ∇ Sτ, is simply that
<strong>intelligence is a force that maximizes the future freedom of action</strong>. In
other words, intelligence doesn&rsquo;t like to be trapped. It keeps its options open.
<em>I find this equation both simple and profound.</em></p>

<p>I&rsquo;m excited about how it might validate our instincts and guide our actions. I
love learning and feel gratified when I have the answer to a question that
arises. I take  pride in the effort I spend growing my knowledge. As a youth, I
think my mental model of intelligence was always based on the quantity of things
someone knew. Until now that is, when Alex Wissner-Gross has made me think about
intelligence in a new way.</p>

<p>Perhaps with age, err&hellip;maturity, I had sub-consciously came to the same
conclusion long ago. IT as a field taught me this lesson early on. I would
never <em>know it all</em>. Even as one narrows their focus down to a speciality like
web development or even a specific technology like Angular.js, the pace of
change makes it very challenging to <em>know it all</em>. There is not enough time in
the day or neurons firing upstairs to do this.</p>

<p>Fortunately, Wissner-Gross shows us that lack of omniscience doesn&rsquo;t limit our
ability to act intelligently. Instead, I think it means we just need to
recognize and acknowledge our limitations. We need to:</p>

<ul>
<li> Understand what we are trying trying to accomplish.</li>
<li> Be honest about what we know and don&rsquo;t know about it (i.e., our <em>knowledge</em>
 not our <em>intelligence</em>).</li>
<li> Assess what that means for our future actions needed to achieve our goals.</li>
<li> Take the smallest next step making only the necessary decisions that moves
 us toward our goal while keeping our future options open.</li>
</ul>


<p>How does this apply to <strong>IT</strong> architecture and, more importantly, how we go
about solving business problems? One good example that jumps out to me is with
the age old debate of agile versus waterfall methodologies. Thanks to Alex
Wissner-Gross, we now have an equation that tells us which is the more
intelligent practice to follow.</p>

<p>An agile approach is built around maximizing your future freedom of action by
working incrementally, making just enough decisions or doing just enough design
to move forward, constantly assessing and learning, and making small course
corrections along the way. Waterfall wants you to specify everything up front
when you know the least, locks you in with <em>signed</em> authorizations at major
milestones, intentionally limits the impact of things you learn by making change
scary, hard and expensive, and waits for validation until the end to understand
whether you met the mark or not when it is most expensive to address.</p>

<p>Even if the problem you&rsquo;re solving is well-defined and predictable, why would
you trap yourself like this? It is not the intelligent thing to do. Now we
know. <strong>Debate over</strong>. Ahhh&hellip;at least I feel better. All of the guilty
feelings over the years for <em>&ldquo;not following the process&rdquo;</em> and instead just
getting <em>&ldquo;%#!~&rdquo;</em> done are gone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://archtitioner.com/blog/2014/04/26/hello-world/"/>
    <updated>2014-04-26T16:27:30-05:00</updated>
    <id>http://archtitioner.com/blog/2014/04/26/hello-world</id>
    <content type="html"><![CDATA[<p>Given that I am a software developer first and foremost, I figured my first blog
post here should be titled &ldquo;Hello world!&rdquo; If you&rsquo;re reading this, I&rsquo;ve already
felt that special god-like feeling we geeks receive when technology submits to our
will and we see the desired result on the display.  Yes!</p>

<p>A little about me. I began coding some 37+ years ago. I love learning and figuring
out new things. Technology and software engineering have definitely fed my hunger
to continually explore and grow. I strive for excellence which has led me on a
journey adding broader and broader skills and responsibilities. As I went from
developing to designing to architecture, I found out how much I enjoyed working
with others who shared my passion and helping them learn and grow as I have.</p>

<p>Which leads me to this blog today. If you share my joy of coding, designing,
and architecting software and building, growing, and leading teams, I hope you&rsquo;ll enjoy
at least some of what I share.</p>

<p>Hello world! Thanks for stopping by. Let&rsquo;s talk.</p>
]]></content>
  </entry>
  
</feed>
